各位同学大家好
欢迎回来
我们接着往下讲
第二部分
卷积层的操作
在具体讲卷积层的操作之前呢
要给大家讲一下图像识别的一些特点
我们通过认识图像识别当中的几个特点
来帮助我们理解卷积神经网络当中的卷积层操作以及磁化操作
首先我们来看图像识别的第一个特点就是特征具有局部性
我们来看下面这个例子
就是一张猫
一张猫
在这一张猫和一只老虎
假如我们有一个模型要对这个图片进行分类
二分类是猫还是老虎
那么我们要看找到它的主要特征
这里其实有一个很好很好的特征
就是老虎的头上是有个王字的
12344b一个王字
这个特征它是局部存在的
局部存在于老虎的身体上的
它不会存在整个区域
因此我们从这一个小例子就可以知道这一个特征它会存在于局部
而不是整体
因此我们只需要观察图片当中某一个区域
就可以完成这个分类任务
可以完成图像识别任务
这是图像识别当中的第一个特点
特征具有局部性
下面我们来看第二个特点是特征可能出现在图像的任何一个位置
我们来看下面这两个老虎
我们接着以老虎的识别为例子
就是我们要找到它头上这个王字这个特征
那么老虎在图片当中的位置
它的头在图片当中的位置是不确定的
它可能出现在任何一个位置
比如说像左边这个
它就在左上角和右边这张呢它就是在上半部分的中间
有的时候如果老虎是躺下来的
肯定要在下半部分
这就是特征可能出现在不同在任何一个位置
这是图像识别单位
第二个特点
看到没有
我们来看图像识别当中第三个特点
这里呢也给大家总结
把三个特点都总结在这里了
我们先来看第三个特点是什么呢
是我们对图像进行下采样
它是不会改变图像的类别
图像的目标的
我们来看一下这只猫
这只胖毛原式是512x512的分辨率
那么我们给它
我们给它进行下采样
把它的分辨率下降到34x3色
我们看到它还是一只胖猫对吧
它不会由于图像分辨率的下降而改变图像的类别
这就是图像识别当中的第三个特点
下采样图像不会改变图像目标
为什么要给大家介绍图像识别的这三个特点呢
这是由于这三个特点有助于后面我们去理解卷积层以及策划层的操作
下面我们就以这三个特点一一去对应到我们卷积当中
为什么要去这么操作
下面我们往下看
第一个特点
特征具有局部性
从这一个特点得到启发
卷积层当中的卷积核只会与输入的数据的一个某一个区域相连接
就是局部连接的这个概念了
这里我们通常这个区域是一个矩形
就是正方形
所以是k乘k的一个区域
这个k乘k呢
这个连接区域就表示是卷积核的尺寸
我们来看下面这个c图
通过局部连接可以带来什么好处
首先我们看左边这个左边这一个图呢
它表示的是全连接的状态
右边呢表示局部连接的状态
我们先看全连接的时候
假如呢我们的输入图像是这一张图
这一个爱因斯坦
这一个爱因斯坦的图片
它的图像分辨率呢是1000x1000
也就是有一兆的像素点
然后我们这个神经网络
它这一层所连接这一层也有一兆的神经元
如果是左边全连接的状态
它有多少个参数呢
我们可以算一下
上面是一兆
一兆乘一兆
它就是十的12次方的参数
这里是非常多的参数
这就不利于我们的计算
下面我们来看右边这样的一个局部连接的方式
我们看到一个神经元
它只会与前面输入图像当中的一个区域
某一个区域小块去连接
这里呢假设了这个size
它连接的size是10x10
来看看这里是10x10
那么这么一个情况
我们输入还是1000x1000的图像
神经元也还是有一兆的深渊
这时他的参数应该是多少呢
就会变成了首先是一兆
一直再乘以每一个神经元
它有多少个参数呢
它只与10x10的区有有连接
有权重连接
因此它就是一兆乘以10x10
也就是100兆
相对于这个10x12次方
相对于全连接的它就减少了减少了多少啊
减少了1万倍的
应该是减少了1万倍
大家可以算一下
就是差别就在于连接的方式
这里连接呢只连接了10x10
而左边这个全连接呢
它连接的是1000x1000
所以就等于十的十次方就是1万倍
从这里我们就可以发现
局部连接可以带来一个非常好的好处
就是减少了参数的连接
降低了计算复杂度
还有一个原因就是从图像识别的特点的第一个特点当中
我们的特征可能存在局部性
不需要去看整张图片
我们就可以得到这一个主要的特征了
下面我们来看第二个特点
特征可能出现在不同的位置
针对这一个特点呢
卷积层当中的卷积核
它就会在图像上不停的去滑动
这个怎么去理解
我们来看卷积和它的参数是可以重复去利用的
这也是我们所提到的参数共享
它具体的操作呢就是在图像上从左到右
去检测
去连接我们图像的这些像素
这些神经元
我们可以看右边这个动图就很好的来理解卷积的一个操作
这个动图呢先讲一下我们下面这一个蓝色的4x4的方块呢
是输入图像
这里是input输入是一个图像形式
它的分辨率是4x4啊
上面这个绿色的呢就是我们的输出
output输出是卷积之后变成了2x2的图像
那么卷积核是哪里呢
卷积核是这一个阴影的部分
我们把这个暂停一下
点个右键呢
这个就能停下来
这个gf图就能停下来了
好我们看一下这个这个阴影的部分
就是这个区好像点了点了
右键好像就不能用这个笔了
调一下
调到line line
然后再点啊
只能光标了
大家看一下吧
就是呃我们看到这一个阴影的部分
阴影的部分就是卷积核的大小
也就是我们输出的一个神经元
它只会与之前的局部的区域连接
我们看到这一个输出的特征图
输出的这个神经元的右下角
这个神经元呢只与上面输入的神经元的右下半部分
这3x3的区域去连接了
这就是局部连接的一个概念
并且我们发现这一个卷积核这个3x3区域是不断的去滑动的
也就是我们卷积核会在输入的图像上
输入的图像上不断的去滑动
我们看到从左到右
这是第一个
第二个
第二个
第三个
第四个就得到了我们输出特征图当中的四个神经元的值
这就是卷积层为什么这么操作
它与图像识别当中的两个特点是紧密联系起来的
下面我们来看一下卷积具体的数值运算是怎么去操作呢
我们通过右边这个示意图
我知道它的形式是怎么运算的
那么下面来看具体的数值是怎么运算
其实卷积操作也非常简单
它就是进行相乘相加
首先我们有输入图像
然后有卷积核的权值权重
然后就可以计算得到输出特征图的这些值了
这些像素值
这里呢我们来看一下
假设我们输入的特征图是3x3的一个区域
3x3的分辨率
我们的可能呢卷积核它是2x2的
这时候我们就拿着卷积核在图像的左上角开始对应区域进行卷积
然后对应的区域呢相乘
然后再相加
怎么去理解
我们这里卷积核呢有四个权重
就找到它对应的取零和零
对应0x0
然后加上1x1
然后下面的2x3
然后3x4
把这数四个数相加起来就得到了我们output
我们输出的神经元的第一个值了
这里下面也有计算左上角第一次卷积
第一个第一次相乘相加得到的是19
下面就不一一讲了
就是呃给大家可以画一下这个区域这一个区
这是第二次卷积的区域
然后我们再滑动我们的窗口
滑动我们的卷积核来到
来到这个区域
第三个区域
然后再往下滑动
来到第四个区域
滑动到右下角结束了
那么我们计算就结束了
这就是卷积层当中的卷积核的数值运算的一个过程
当然在这里还省略了一步
也是我们惯例
大部分的示意图呢都会去省略这一个偏置项
其实还有一个偏置项b的bios
这个由于我们绘图呢不太方便
所以大家知道有这么一个偏置项就可以了
这里不会出来
也不影响我们去理解卷积它的这个操作
卷积层的操作了
右边是卷积的结构上的操作变化
左边是卷积的数值上的运算过程
从这里我们就发现卷积层它的核心在于这一个ko
关于ko呢
我们还要进行详细的讲解
而这些参数会代表了某种模式
某种特征
这个卷积核对于图像进行卷积之后
相当于进行了特征提取的操作
因此我们把卷积得到的这些输出的数据也会称之为特征图
feature maps
这就是特征图的概念
而卷积核到底它的操作是怎么样的呢
它实现怎样的功能
我们可以举一些例子给大家看一下
下面我们来看这个示意图
下面这个图这个示意图呢举了三个kl
这三ko呢不是训练而来的
而是人工设计的一些ko
一些卷积核
这些卷积核呢会对应了一些操作
我们右边也写了
我们一个个来看
左边呢是原始输入图像
中间是对应的科导
我们先看第一行
第一行它就实现了一个边缘检测的功能
我们看到用这个ko对原始图像进行卷积
就得到这一个边缘检测的输出的特征图
我们看到这里就能把这些边缘的部分给找出来了
而不是边缘的部分呢
它就是黑色的
这怎么操作呢
怎么实现这一功能呢
这就要来看这个ko了
我们要看这个ko
我们看这个ko它的权重是这样的
在中间这个像素呢是八
我们还是用这个吧来中间的像素是八
而周围的八个像素呢是乘以-1的
这里实现了一个什么功能呢
我们可以想一下它实现的功能就是以中间这个像素减去周围的像素
通过这一个操作来观察这中间的像素与周围像素是否差异比较大
怎么去理解呢
比如说我们看到这里是全黑的
我们假设看这个位置吧
把假设看这个位置
这个位置区域
那么我们这个位置去九个像素值
他很有可能是比较接近的
我们可以极端一点
极端一点
我现在也不知道我们极端一点
这像素值呢是都是100啊
100太大了
写不下
反正这九个位置呢都是100
如果是100的情况下
大家想一下
经过右边这一个ko中间这个像素值乘以八
然后别的地方别的八个像素值乘以-1
它等于经过这个kl计算式等于几啊
等于零
我们写到左边来
它就等于零的零呢对应到这里
我们看一下右边输出图
它就是黑色的
如果这个像素值与周围的差异比较大的时候呢
这个值就会比较大
比如说在边缘的时候
边缘的时候
我们这一个像素边缘的时候
我们看到边缘的时候呢
它与周围写大一点吧
就是边缘的时候我们看到这一个点
它与周围八个像素值差异就大了
大的时候再用这一个ko去计算之后
他得到的输出的值呢就会大
所以看到这一个位置呢它就是白色的了
这就是边缘检测的ko
我们来看到是这样的
中间是八
周围是-1
是不是很神奇
下面我们再来看第二个
可能它是一个锐化的功能
这个锐化的可能锐化的卷积核是这样的
它中间是五份
我们可以理解为五份
然后别的四个角是零
就是我们不care了
然后呢剩下这四个就是-1份乘以-1的
从这里我们就发现这个值算出来的是一个像素
它多乘了一份
也就是对于中间这个像素呢
它有五份
它只需要减去四份的像素
因此它是多了一些内容的
所以锐化它的一个功能就是提高图像当中某一部分的清晰度
或是聚焦程度
所以图像锐化呢它是用来补偿图像的轮廓
增强图像的边缘以及灰度跳变的部分
使得图像变得更加清晰
我们可以看一下对比
对比原图以及锐化之后的图片
我们来看哪个位置呢
看这两个位置吧
这个位置以及这个位置
我们看到这个位置是否就相对原图呢它更明显了
我我用方框吧
这个位置这个叫什么啊
我也不知道它叫什么
这个位置以及我们看一下这些位置
它轮廓它的边缘更清晰
这就是锐化的一个功能
它核心呢就是在这个权重的一个设计上
这个是五多了一份好
下面我们再来看第三个
可能第三个卷积和它实现了一个功能是高斯模糊
高斯模糊呢产能用于制造
我们看一下这个原始图像以及模糊之后图像
我们看一下模糊图之后的图像吧
这些边缘的分界是不是很模糊了呀
以及这些细节
比如说这个鼻子
它的鼻孔
这个区鼻孔
我们区鼻孔的区域
在原始图片上我们可以看到它是比较清晰的一个黑色的一个鼻孔
但是在这里我们看到好像看不清楚他这是和鼻孔
这就是高斯模糊会模糊掉我们图像的内
会模糊掉我们的图像损失高频信息
一些噪声呢它也可以去除掉
我们来看他可能是怎么设计
怎么来实现的
首先先看我们先看kernel里面吧
kernel里面它是每一项都是正的
并且呢我们看到四个角是乘以一是一份
最后中间呢它是四份
然后剩下的那四个位置是两份
这里就像一个权重
中间的分数越高
而周围的分数越低
大概是这样的
这样以圆心以中心中心像素为圆心往外扩张的时候
越距离中心越远的像素
它的权重它的分数就越少
乘完之后呢
我们可以算一下
其实这一个坑里面它总共有16份
由于16份
所以它还要除以16
说白了就是一个加权平均
只不过对于中心像素
他考虑的更多一些
距离中心像素越远的考虑越少一些
这就是高斯模糊
这是除以16的
这1/16呢其实是可以放进去的
只不过为了展示这些分数
12121242121的原因
他把1/16提到这个矩阵外面来了
这就搞死模糊卷集合好
通过这三个例子我们就知道了
卷积呢它的核心在于卷积核里面的权重参数
这个权重参数会代表着某一种模式
某一种特征
而卷积的过程就是拿着这些特征去我们原始图像上进行找
去找这一些找这些特征
如果出现这一个卷积核代表的那种模式
那我就输出一些比较强的这个值
输出比较强的特征值
输出比较强的神经元的输出值
我们可以看看边缘检测
这个ko就表示了边缘的特征
那么我们拿着这个特征在原图上找找找
在呃比如说在这个地方没找到这样特征
那么给他输出比较低的值是黑色的
那么在比如说在耳朵这个位置
在这个位置我找到了有这么一个符合柯南的特征
符合ko的模式
那么我们就给它输出比较大的值
它就是白色的了
这就是卷积核的作用
我们怎么去理解卷积核
卷积核当做权重就代表了一种某特征模式
我们拿着这种特征去图像上进行卷积
去找特征
符合卷积核模式的这个区域呢
我就给他输出较高的输出值
下面再给大家看一个卷积和可视化的这个示意图
这个示意图呢是2012年expect连paper里面所提出来的
他对sn的第一个卷积层的卷积核进行了可视化
他发现一个非常有趣的现象
就是卷积核它呈现出了边缘频率和色彩上的特征
在呢要把这里要化成一分为二啊
应该是是不在这啊
不在这里大概就这样一分为二
上面是48个
下面是48个卷积核
上面48个卷积
下面48个卷积
我们先来看上面
他发现了卷积呈现出一些边缘频率上的一些特征模式
就是说我们在第一个卷积层
它去对原始图像
我们的自然rgb图像
它去探测这些边缘这些基础的底层的特征
除了上面这48个频率边缘模式的卷积核
它还有下面48个具有色彩模式上的一些卷积
和我们看到有一些对绿色比较敏感的
对这个红色敏感的蓝色敏感等等
对于色彩上的卷积核
就是它会对色彩上进行特征提取
这也是符合低级特征的
就是我们自然图像当中低级特征就是一些基础的色彩基础的边缘
这是在网络当中卷积核的可视化
从这里我们也知道了卷积和它还是做特征提取
从这里我们也知道卷积核它是做特征提取的
它的权重就代表了某种模式
而这些模式呢不是我们人们去设计的
而是根据网络模型自己去训练
在卷积层当中
它还有两个重要的概念
一个是padding
另外一个是stride的不长
这里先给大家讲padding的概念
我们看一下加入了padding
我们该怎么去计算padding呢
它的操作实现的方法就是在输入的图像的周围添加额外的行或者列
他这么做呢有两个主要作用
第一个它是使得我们卷积之后的图像的分辨率不变
为什么想要让图像分辨率不变呢
它主要是方便于我们去计算特征图
在卷积神经网络过程当中
我们特征图通常是以倍数的关系去衰减
去缩减的
去缩小的
如果我们不加padding
我们去卷积之后
这些像素很有可能经过一次卷积
它就缩小了两个像素
缩小了一个像素
这样不利于我们去计算特征图的尺寸
因此我们会去设计符合这一个卷积核大小的
使得我们卷积之后输出特征图尺寸不变
这是第一个作用
另外一个作用呢就可以弥补边界信息的一个标识
边界信息的丢失是指我们边界的信息
它被卷积的次数太少了
相对于我们图像中间的这些像素
它被卷积的次数比较少
我们怎么理解这两个主要作用呢
我们来看右边这个示意图
我们先看最右边的吧
这个示意图好像是两个部分的
我们先看最右边这个c图
最右边这个示意图呢给我们展示了输出特征图
分辨率不变的情况
就是我们来看还是还是之前的那一个示意图
只不过它尺寸上有所改变
蓝色呢是input
绿色的呢是output
还有这个阴影的部分就是我们卷积和大小了
从这里我们可以知道它是一个3x3的区域
只与前面3x3的区域去连接
然后这里就padding了
我们看到这个这个虚线
虚线的就是padding啊
下面有吧
这个就是padding
这个就是padding
pdd多大呢
就是一个像素
一个pixel
它会在原始图片的周围
上面这一行和下面这一行
以及左边这一列和右边这一列这四个方向上都填充上一个像素
填充之后我们来看一下重点来关注它的尺寸变化
原始呢它的输入是5x5的
加入这一个padding
然后我们color size是3x3的
它的输出呢我们发现还是5x5的
这样我们就发现了输入输出的特征图
它的尺寸是没有被改变的
这是第一个作用
下面我们来看左边这个示意图
第二个作用
它可以弥补边界信息的一个标识
我们怎么去理解呢
先看原始的不带pdd的操作
这个在之前我们也看到了
就是这么一个3x3的输入
然后kl size是2x2
最终得到一个2x2的
这里呢我们的input我们可以把这里画一下
因为这没有虚线了
我们画到这蓝色方框是原始的特征数据
原始的实物图像
在这一个图像当中也是加了一个pdp等于一的写在这里吧
p等于一的这个padding也是在周围上下左右都会加上一个像素
然后再去进行卷积操作
在这里我们来重点理解这个边界信息的丢失
我们先看上面上面那个边界信息就是零
这个位置的像素值呢
他只在输出特征图当中只被卷积了一次
只被卷积了一次
也就是这一个零只在只贡献了这个位置一次
only one只有一次
而向中间这一个像素值
比如说四贡献了几次呢
第一次就有他
第二次还有他第三次啊
我们应该这样看
第一次这个一有有他被卷积到了
第二次还有他也被卷积到了
然后这里有三次
然后再往右下角也被卷积到了
所以中间的像素值呢会被嗯充分的卷积
充分的使用到
而边界的这些像素值的信息就会存在一种我们称之为丢失的情况了
所以我们会加入padding
加入padding之后
我们来看一下
下面的时候
我们再来观察这个零这个位置
他被卷进了几次呢
我们看到这是一次
这是第二次
然后这这这是啊对这是第三次啊
这个颜色混淆我都有点乱了啊
这是第四次
大家能不能发现我可以换个颜色
我们来看ko的
我们主要来看ko的
换个荧光笔吧
我们看ko的左上角就好了
这里进行一次卷积社会会
你会卷到我们这个零
然后这里再卷积一次
也会卷到我的零
这里卷积了一次也会卷积到这个零
在这里再卷积就会有四次
所以我们知道加了padding之后呢
可以弥补我们边界的丢失
边界像素值丢失
这就是填充的两个重要作用
右边这个示意图告诉我们输入输出特征图可以不变
左边这个cv告诉我们可以弥补边界信息的丢失
这就是填充的作用
下面我们来介绍strike的步幅不长的一个作用
有的时候也会称为步长
在这不长
他的具体实现呢就是我们卷积核是要在图像上从左到右
那么你这个滑动的间隔这个距离是多大呢
这个就称为不符
就相当于我们在这个格子上去走走路
我们每一次走多长呢
走多大的步幅呢
就成为不服了
拽的它的一个重要作用的是控制特征图的输出
而且是直接影响到这个特征图大小
它的影响是非常直观的
直接影响s一倍
这个s呢这个s就表示是不符的长度的长度
下面两个示意图
我们来看一下左边这个示意图
它展示的是步长为一的时候
它的卷积情况
右边这一示意图呢它展示的是不长为二的卷积情况
我们怎么看
这一个就是看这个卷积核移动了
每一次移动几个像素
我们来看一下
我们追着他跑1345
哎呀
我发现它每次移动是一个一个像素
通常呢它行和列移动的都是固定的
我们通常不会让行和列是不一样的
毕竟我们通常都要让这一个feature是一个矩形情况
如果行和列执行不同操作
它就不能得到这个矩形
正方形应该叫做正方形
好下面我们来看strike等于to的时候
它是怎么操作的呢
跑的有点快啊
我们来看呃
在这里在这里
然后在这里在这里这里
然后在这里这里这里ok诶又回来了
好
我们下把它移动的地方都给找出来了
我们看一下这个移动它移动了间隔是什么
间隔就是两个像素
两个pixel
所以它的stride就是to
他在to的时候
他是这么去操作的
在这个操作过程当中呢
我们重点来看一下它特征图发生什么变化
它的特征图我们看一下输入特征图是6x6的
而输出呢变成了3x3
就减小了一半了
这就是拽的把它缩小一半的这一个功能
而在这里也给大家提一下
我们看到这一个右键把它停下来
我们看到在这个位置呢
右边它还有一个像素
为什么他没有去计算机呢
这不是因为padding的原因
而是卷积
如果到了边界的时候
不满足colonel size的大小的时候
它是会抛弃的
也就是向下取整
大家记住向下取整呃好了
不停下来让它动起来吧
就是到了边界的时候
你不满足嗯
connel size大小的时候就会向下取整
给它抛弃掉
这里大家要注意
不是由于pdd啊
即使如果我们说这个可能到这个位置的话
他即使有图像的信息
他也会向下去整的好
前面呢就给大家讲了卷积核的操作
以及padding和stride这两个具体的操作
理解了上面这三个操作
我们就可以来计算
通过卷积层的卷积操作之后
我们的特征图的尺寸它是如何变化的
这里就给出一个公式
其实也非常简单
我们来看这个fo呢表示输出特征图的size
这里我们通常是讲一个边
前面也提到了啊
长和宽也是行和列的操作
我们都是一样的
尽量都是方形
就是矩形
方形的情况
正方形的情况
所以我们只列出一个都要列出来
就是再乘以
下面我们就看行的形式就可以了
这里是输出的长长度
输出特征图的长度
而这个f a呢就是输入特征图它的长度
这个k呢表示克隆size就是condos
就是卷积核的大小
然后这里要加上两倍的ping padding呢
我们通常是指在一条边上
它要加几个像素
那么我们在只看行
只看行的话哈
只看行的话
他左边和右边都有padding
所以这里要乘以二
大家知道这个二为什么是由于左右都有这个padding的像素
好加完之后呢
我们要把它除以一个stride的这个s就是ride不长
这里我们就发现ride对于图像的分辨率的改变是起了主要的作用的
然后计算完之后
我们还要加一
这是由于我们在一开始的时候有一个像素
所以要加一
这就是特征图输出的尺寸的计算公式
它非常简单
下面我们来看三种不同情况下的图
它是怎样去计算的
下面这个公式也列出来
非常简单
我们简单来看一下
首先我们看这里左边第一个fn是什么呢
f我们数一下这个蓝色的就是四
然后我们的ko size看阴影的部分就是三
然后padding我们padding周围没有这个虚线的方框
所以padding是零
我们怎么看呢
我们看这个这个ko每一次跳跃多少哎
跳跃是这样
跳跃是这样好
我们看到它是一个像素
所以分母我们除以一
然后再加一
大家算一下口算
这个肯定是等于二了
二正好就等于我们这一个输出特征图的大小2x2
好我们再来看带上padding
带上stride
我们这个计算是怎样的呢
首先看in是123456
这就是六
然后cn size找阴影部分
阴影部分是三padding
我们看这个一条边有多少个
padding是一
然后stride ride我们还是跑的太快了
我们还是就看他这个阴影部分
它它它每一次跨越多少个像素
每一次移动几个像素比较跨越
不能叫跨越
每次移动几个像素
好移动是两个像素
所以我们通过这个公式计算一下
就等于三的三
也正好是等于我们看到上面这个3x3的等于多输出
下面我们再来看一下呃
不带拽
就是拽的一代上padding
他的计算是怎么样的
这里就不写了
初始5k是二
k是三
pin是一rise 1
这样计算得到的就是五
这里我们重点来看右边这两个的一个对对比
一个变化
左中间中间这个吧
中间这一个它的输入是6x6
变到了3x3
我们有发现它的特征图变化是一个倍数关系
这个倍数关系得来的原因呢就是这一个ride
大家看的是26÷2得到三
好
我们来看右边右边这一个输入呢是5x5
然后输出它还是5x5的
这个为什么没有变化呢
我们在的是一
这导致了它不会变化
同时我们要给它一个padding
使得我们卷积之后它的特征图保持是一致的
这就是cdstrike它的一个重要的作用
通过上面的一系列讲解
我们就知道了卷积怎样操作的
卷积核它怎样去运算
以及我们在卷积过程当中会对原始图像进行进行填充
卷积它的操作还是非常简单理解的
然后上面的解释呢都是你单通道的例子给大家讲解卷积的过程
然后我们在具体应用卷积神经网络中
通常是对自然图像进行卷积的
而自然图像呢它是一个三维的数据
就不再是单通道了
进行表示
rgb图像呢它是一个三乘以h乘以w的一个三维的数据
三呢就是channel表示的是通道数
这三个通道就是r通道
七通道通道和b通道就是红绿蓝这三个通道了
而针对多通道呢
我们的卷积核也要进行相应的改变
这里就要给大家讲解多通道的卷积
我们的核心在于卷积核的改变
卷积核它怎么改变呢
我们在上面的卷积讲解的过程当中
我们的卷积核都是一个矩阵
就是一个呃的2d的张量的形式
然后在多通道的卷积的时候
我们的卷积核一定要注意它要改变成3d张亮的形式
而多出来的这一个维度它是多长呢
这要根据你输入的通道数有关
怎么去理解
我们先来看一个多通道卷积的示意图
看一下多通道怎么去卷积的
怎么去操作的
这里呢先给大家定义一下这个输入输出
这个rip我们假设输入input x可能呢定义为y
然后output输出呢是y
这里就给大家定义了我们x w y它的shape是怎么样的
x输入呢我们看一下后面这两个都很好理解
其实这三个变量的后面都很好理解
就不讲后面这这两个啊
后面这两个呢它就是高和宽嘛
很好理解的
就是高和宽
下面我们主要来看这里前面这些c c n c out
我们先看输入数据
对于输入数据而言
现在我们有两个通道
有两个通道
这是通道一
通道二它就对应到了我们x当中的第一为c in
这里我们可以写一下
就是这里我们应该是2x3x3的这么一个形式
这1x然后我们的ko呢在上面我提到了ko是一个3d张量
第一个维度输入通道有关
我们输入有几个通道
我们的3d单量地位就就是几
我们看到了它有两个通道
所以我们一个卷积核也有两个通道
注意我刚刚重点读了一个一个卷积核
大家注意
这不是多个卷积
它是一个卷积核
我们先看一个卷积核情况
一个卷积核它就变成了变成了乘以3x3
2x2的形式
2x2x2
后面这一个2x2呢是我们connesize
我们通常说的kl size
准确的尺寸
前面这一个二呢是c int c n c int是输入通道有多大
它这里就是几
大家一定要注重点注意这一个好
这是我们一个坑呢
大家一定要注意在强调这是一个卷积核
然后呢我们通常在卷积线方程当中
它会有多个卷积核
所以他还会有一项还会有一个维度是see out
这里我们c out呢
这里只展示了一个卷积
所以这里是一这里写成一
因此我们这么一个多通道的卷积呢
它的ko整体的形式就会变成了一个四维的思维的思维的张亮
大家一定不要去混淆
发现四维张量
大家要注意这个思维
每个维度它代表什么意思啊
我们只要设置卷积核的尺寸就ok了
只要关注它的高和宽好
我们看这里就是2x2x2的一个形式
那么它怎么去计算呢
我们接下来看到等号的中间
这里它的计算方式是对应通道去与输入的对应通道进行卷积
然后相加
怎么理解对应卷积核的通道与对应输入的通道进行卷积
这一个应该很好理解
我们看一下这两个通道就会分为两个部分
然后上下这两个部分呢就有前面我们所说的单通道卷积
它是一样的
一样的操作
那么我们先看下面这一个部分
这里大家是否还记得他是19
这个在讲卷积的时候应该算过
上面呢我们可以算一下上面是什么1x1的一
然后加上四
然后三四十二
然后加上20
这个数呢它是等于32
等于等于多少
37的
计算好主通道
它主通道的去卷积之后呢
他要把这两个数加起来
大家看这个加号
这个加号
所以37+19得到56才得到我们输出通道的第一个像素值
然后剩下的三个项数值也是这样去操作得来的
这里我们要从整体去看
就是一个卷积核
它对应的一个输出通道啊
大家看到我们一个卷积核对应到一个输出通道
那么一个卷积和它的大小是多大的呢
首先我们要高和宽
然后还要有一个通道的概念
通道谁来控制的
是以输入来控制的
你输入有几个通道
你的卷积核就有几个通道
这就是w当中的ci乘以kh乘以kw这三个维度的来源
我们在卷积过程当中通常会有多个卷积核
所以w呢它还有一个c这个c out的维度
这就是为什么在卷积层当中
我们卷积核整体它是一个四维张量的一个形式
到这里大家应该理解了
多通道卷积它的数据的trip该怎么变化的
我们的卷积核又该是怎么样的
下面我们来看具体的一个例子
我们就可以理解为rgb通道了
比如说比如说是儿童岛
这是基于通道
这是b通道
这里呢给我们展示了两个ko
两个两个两个ko
这里是一个ko
我们就看一个ko就好了
一个kernel它要对应输出只能输出一个通道的特征图
这样我们看到一个一个ko
然后把它停下来吧
一个ko等一下吧
然后停下来
我们看这一个ko会有三个二维的部分
三个部分呢它会对应的与实物通道卷积
卷积之后它会求和
求和之后呢
这里也很细心的给我们绘制出来的bios
这个片子就是相加
加完之后得到输出通道的一个像素值
大家有没有看到这个输出通道这个五这个位置
这种绿色方框给圈出来的
也就是蓝色区域与红色区域进行相乘相加
再加上这个片子就等于五了
如果大家感兴趣的话
可以去算一下
现在这个这个r通道当中的这九个
哎呀这个这个r通道的这九个值乘以卷积核当中这九个值
然后居通道这九个值相乘相加
b通道的这几个字相乘再相加
再加上偏置项
它就是等于-1的
感兴趣的同学可以去算一下
就不再详细讲解了
然后呢它还有第二个卷积核就可以得到第二个真图了啊
这就是多通道的一个卷积
在这里呢还要再重重复强调一下
我们卷积核它虽然是一个3d的
但是它执行的是一个2d的卷积
还是执行的是2d的卷积
2d卷积
大家注意2d的tion
2d的虽然一个卷积核是3d的
但是它是2d的卷积
大家怎么去理解呢
我们不要被卷积核的尺寸给迷惑了
我们一定要看卷积它是在哪几个维度上去滑动
我们通过这个来理解它是几维卷积
我们看到这个卷积核呢它只在两个维度上滑动
第一个维度是行
第二个维度是列
所以它是一个二维的卷积
而我们通常的静态图像呢用的都是二维的卷积
什么时候我们会用3d conclusion
在一些视频的数据任务当中
它还有一个时间维度上的这一个维度
所以我们在因此在对视频数据或者是医学领域当中
比如说c t图像
它是三维空间扫描出来的图像
也有三维第三个维度的信息
我们才会用3d的卷积
我们通常用rgb图像呢
它都是2d的卷积
我们千万不要被这一个卷积核的shift的形状给迷惑
一开始我也以为这个3d的张量卷积核都是3d的
那它就是3d的卷积
其实这个理解是错误的啊
这就是多通道的卷积
